import sys
import cv2
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QPushButton, 
                             QHBoxLayout, QVBoxLayout, QFrame, QMessageBox, QLabel)
from PyQt5.QtCore import Qt, QPoint, QRect, QTimer
from PyQt5.QtGui import QCursor, QScreen, QImage, QPixmap

class ScreenshotWindow(QMainWindow):
    """显示截图的窗口"""
    def __init__(self, pixmap, parent=None):
        super().__init__(parent)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        # 主窗口部件
        central_widget = QWidget()
        central_widget.setStyleSheet("background-color: rgba(255, 200, 150, 200);")
        self.setCentralWidget(central_widget)
        
        # 主布局
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # 顶部栏（包含关闭按钮）
        top_bar = QWidget()
        top_bar.setFixedHeight(30)
        top_bar.setStyleSheet("background-color: rgba(255, 200, 150, 200);")
        
        top_layout = QHBoxLayout(top_bar)
        top_layout.setContentsMargins(0, 0, 5, 0)
        top_layout.setAlignment(Qt.AlignRight)
        
        # 关闭按钮
        self.close_btn = QPushButton("×")
        self.close_btn.setFixedSize(20, 20)
        self.close_btn.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 50, 50, 200);
                color: white;
                border: none;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: rgba(255, 0, 0, 200);
            }
        """)
        self.close_btn.clicked.connect(self.close)
        top_layout.addWidget(self.close_btn)
        
        main_layout.addWidget(top_bar)
        
        # 截图显示区域
        self.image_label = QLabel()
        self.image_label.setPixmap(pixmap)
        main_layout.addWidget(self.image_label)
        
        # 存储所有截图窗口的引用
        self.screenshot_windows = []

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.old_pos = event.globalPos()
    
    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton:
            delta = QPoint(event.globalPos() - self.old_pos)
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.old_pos = event.globalPos()

class TransparentWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # 略...（保持原有初始化代码不变）
        
        # 存储所有截图窗口的引用
        self.screenshot_windows = []
    
    def capture_transparent_area(self):
        """截取透明区域内的图片"""
        try:
            top_left, bottom_right = self.get_transparent_area_coords()
            
            # 获取屏幕截图
            screen = QApplication.primaryScreen()
            screenshot = screen.grabWindow(0, 
                                         top_left.x(), top_left.y(),
                                         bottom_right.x() - top_left.x(), 
                                         bottom_right.y() - top_left.y())
            
            # 创建并显示截图窗口
            screenshot_window = ScreenshotWindow(screenshot, self)
            screenshot_window.show()
            self.screenshot_windows.append(screenshot_window)
            
        except Exception as e:
            QMessageBox.critical(self, "错误", f"截图失败: {str(e)}")
    
    def button_clicked(self, button_num):
        if button_num == 2:
            # 关闭所有截图窗口
            for window in self.screenshot_windows:
                window.close()
            self.screenshot_windows = []
        else:
            QMessageBox.information(self, "按钮点击", f"按下按钮{button_num}")

    # 其他函数略...（保持原有函数不变）
    
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = TransparentWindow()
    window.resize(600, 400)
    window.show()
    sys.exit(app.exec_())